#!/bin/bash

version="0.3.0"
config_file=./mongroup.conf
repo=git://github.com/jgallen23/mongroup.git
pid_dir=./pids
log_dir=./logs
#
# Output usage.
#

usage() {
  cat <<-EOF

  Usage: mongroup [options] [command]

  Options:

    -c, --config <path>  set config path. defaults to ./mongroup.conf
    -V, --version        output program version
    -h, --help           output help information

  Commands:

    start [app]          start [app] or all apps
    restart [app]        restart [app] or all apps
    stop [app]           stops [app] or all apps
    status               shows the status of all running apps
    log [app]            tail the [app]'s log or all apps
    tail [app]           tail -f the [app]'s log or all apps
    less [app]           runs the log files through less
    update               update mongroup to the latest version

EOF
}

#
# Check if <pid> is alive.
#

alive() {
  kill -0 $1 2> /dev/null
}
#
# Clean up after ourselves
#
clean() {
  rm $pid_dir/*
  rm $log_dir/*
}
#
# Abort with <msg ...>
#

abort() {
  echo
  echo "  $@" 1>&2
  echo
  exit 1
}

# Set config <file>
#

set_config() {
  test -f $1 || abort invalid --config path
  config_file=$1
}

#
# Start proc <name> with <cmd>
#

start_proc() {
  printf "  \e[36m%10s\e[m : %s\n" "start" $name
  mon_opts=(-d -p "$pid_dir/$1.pid"
    -m "$pid_dir/$1.mon.pid"
    -l "$log_dir/$1.log")

  # if $attempts is not empty and is a number.  
  if [[ -n $attempts && $attempts != *[!0-9]* ]] ; then
    mon_opts+=(--attempts "$attempts")
  fi
  # if $on_error is not empty and is a regular file.
  if [[ -n $on_error && -f $on_error ]] ; then
    mon_opts+=(--on-error ""$on_error" "$name"")
  fi
  # if $on_error is not empty and is a regular file.
  if [[ -n $on_restart && -f $on_restart ]] ; then
    mon_opts+=(--on-restart ""$on_restart" "$name"")
  fi
  shift; mon_opts+=("${args[*]}")
  mon "${mon_opts[@]}"
}

#
# Start a single process.
#

start() {
  local app=$1
  # loop all processes loaded from config file.
  for name in "${processes[@]}"; do
    ref=$name[@]; args=( "${!ref}" );
    local pidfile=$pid_dir/$name.pid
    # $app is empty or $name is the process we want ($app)
    if [[ -z $app ||  $app == $name ]]; then
      # if the pid file exists.
      if [[ -e $pidfile ]]; then
        local pid=$(cat $pidfile) # read the pid
        # check if process is alive.
        alive $pid
        # exitcode of alive is 0 means the process is not running.
        if [[ $? -eq 0 ]]; then
          printf "  \e[36m%10s\e[m : %s\n" "already running" $name
          break
        else
          # The process is dead! Restart it!
          start_proc $name "${args[@]}"
        fi
      else
        # process is not running, start it up.
        start_proc $name "${args[@]}"
      fi
    fi
  done
}

#
# Check status.
#

status() {
  echo
  for name in "${processes[@]}"; do
    ref=$name[@]; args=( "${!ref}" );
    local pidfile=$pid_dir/$name.pid
    printf "  %10s : " $name
    if [[ -f $pidfile ]]; then
      echo `mon --pidfile $pidfile --status`
    else
      printf "\e[31mdead\e[m\n"
    fi
  done
  echo
}

stop_proc() {
  printf "  \e[36m%10s\e[m : %s\n" "stop" $2
  kill -s SIGQUIT $1 2> /dev/null
}
#
# Stop a single process.
#

stop() {
  local app=$1
  for name in "${processes[@]}"; do
    if [[ -z $app || $app == $name ]]; then
      local pidfile=$pid_dir/$name.pid
      local monpid=$(cat $pid_dir/$name.mon.pid)
      if [[ -f $pidfile ]]; then
        local pid=$(cat $pidfile) # read the pid
        # check if process is alive.
        alive $pid
        
        if [[ ! $? -eq 0 ]]; then
          printf "  %s : \e[36m%10s\e[m\n" $name "not running"
          break # We are done for this process, do the next.
        else
          stop_proc $monpid $name 
        fi
      else 
        stop_proc $monpid $name
      fi
    fi
  done
}

#
# Handle starting processes.
#

handle_start() {
  for target in ""$@""; do
    for name in "${processes[@]}"; do
      if [[ -z $1 || $target == $name ]]; then
        start $name
      fi
    done
  done
}

#
# Handle stopping processes.
#

handle_stop() {
  for target in ""$@""; do
    for name in "${processes[@]}"; do
      if [[ -z $1 || $target == $name ]]; then
        stop $name
      fi
    done
  done
}

#
# Handle restarting processes.
#

handle_restart() {
  for target in ""$@""; do
    for name in "${processes[@]}"; do
      if [[ -z $1 || $target == $name ]]; then
        local target=$name
        stop $target
        start $target
      fi
    done
  done
}

#
# Tail logs.
#

tail_log() {
  local arg=$1
  shift
  local log_files=()
  local follow=

  for target in ""$@""; do
    for name in "${processes[@]}"; do
      if [[ -z $1 || $target == $name ]]; then
        if [[ -z $app || $app == $name ]]; then
          log_files+=("$log_dir/$name.log")
        fi
      fi
    done
  done

  if [[ $arg == "less" ]]; then
    less -R ${log_files[@]}
  else
    if [[ $arg == "logf" || $arg == "tail" ]]; then
      follow="-f"
    fi
    tail -n 30 $follow ${log_files[@]}
  fi
}

#
# Update mongroup(1)
#

update() {
  echo "updating mongroup(1)"
  rm -fr /tmp/mongroup
  git clone $repo \
      --depth 0 \
      /tmp/mongroup \
      &> /tmp/mongroup.log \
    && cd /tmp/mongroup \
    && make install \
    && echo "updated $version -> `mongroup --version`"
}

load_config() {
  # check if the config file exists.
  if [ ! -f $config_file ]; then
    abort $config_file doesn\'t exist
  fi
  # source the config file.
  . $config_file

  # check if the pid directory is a valid directory.
  if [ ! -d $pid_dir ]; then
    abort $pid_dir directory doesn\'t exist
  fi

  # check if the log directory is a valid directory.
  if [ ! -d $log_dir ]; then
    abort $log_dir directory doesn\'t exist
  fi
}
# load the config first, reload it later if someone sets --cofig
load_config

# default to status

if [[ $# -eq 0 ]]; then
  status
  exit
fi

#
# Parse argv.
#

while test $# -ne 0; do
  arg=$1
  shift
  case $arg in
    -h|--help)
      usage
      exit
      ;;
    -V|--version)
      echo $version
      exit
      ;;
    -c|--config)
      set_config $1
      load_config
      shift
      ;;
    clean)
      clean
      exit
      ;;
    start)
      echo
      handle_start $@
      echo
      exit
      ;;
    status)
      status
      exit
      ;;
    restart)
      echo
      handle_restart $@
      echo
      exit
      ;;
    stop)
      echo
      handle_stop $@
      echo
      exit
      ;;
    log|logf|less|tail)
      tail_log $arg $@
      exit
      ;;
    update)
      update
      exit
      ;;
  esac
done
